we've been assuming that every address space is unrealistically small can fits into physical
memory, every address space of running process fits into memory.

we're here to relax these big assumptions and assume we wish to support many concurrently-running large address space.
To do so, we require an additional level in the memory hierarchy.
Thus far,we assumed all pages reside in physical memory.
However, to support large address space, OS will need to a Place to stash(hide) 
away portions of address space  that currently aren’t is great demand.


characteristics of a location are that is should have more capacity than memory, is slower in general.
hard disk drive in modern system play that role, big and slow hard drives sit at bottom in memory hierarchy.

#How can the OS make use of a larger, slower device to transparently provide the illusion of a large virtual address space? 

why we need to support larger address space for a process ?
With a large address space, you don’t have to worry about if there is room enough in memory for your program’s data structures; 
rather, you just write the program naturally, allocating memory as needed. It is a powerful illusion that the OS provides, and makes your
life vastly simpler.

old systems used memory overlayers; needs programmer to manually move pieces of code or data in and out of memory as they were needed.
try imagining, before calling function or accessing some data, you need first arrange for the code or data to be in memory.

For now, just assume we have a big and relatively-slow device which we can use to help us build the illusion of a very large virtual memory, even bigger than physical memory itself. 


beyond just a single process, the addition of swap space allows the OS to support the illusion of a large virtual memory for multiple concurrently-running processes. 

as early machines clearly could not hold all the pages needed by all processes at once.
Thus, the combination of multiprogramming and ease-of-use leads us to want to support using more memory than is physically available.

;------------------------------------------------------Start:21.1------------------------------------------------------------------------------
21.1 Swap Space
we need to reserve some space on the disk for moving pages back and forth, we refere to such sape as swap space, out of memory to it, into memory from it.
the OS can read from and write to the swap space, in page-sized units.
To do So,the OS will need to remember the disk address of a given page.


the size of Swap space is important,it determines the maximum number of memory pages that can be in use by a system at a given time.
for simplicity we assume its very large for now.


in tiny example a 4-page physical memory and 8-page swap space.
three processess(proc 0, proc 1, proc2) sharing physical memory; each have valid pages in memory rest located in swap space on disk.
proc 4 have all of its pages swapped out to disk; isn't currently running.
one block of swap remains free.
using swap sapce it allows the system to pretend that memory is lager than it acutally is.


not only on-disk location for swapping traffic.
for example,we running a programe binary. 
the code pages from this binary are initially found on disk, and when the programe runs, they are loaded into memory
(all at once when the program starts excution, one page at a time when needed).
if the system needs to make room in PM; it can re-use the memory space for these code pages, it can later swap them in again from the on-disk binary on file system.

 		  PFN 0	   PFN 1    PFN 2    PFN 3	
		-------------------------------------
physical memory | Proc0  | Proc1  | Proc1  | Proc2  |
		| [VPN0 ]| [VPN2 ]| [VPN 3]| [VPN 0]|
		-------------------------------------
		Block0	  Block 1   Block 2  Block 3  Block 4  Block 5	Block 6  Block 7
		-------------------------------------------------------------------------
Swap Space      | Proc0  | Proc0  | free   | Proc 1 | Proc 1 | proc 3 | proc 2 | proc 3 |
		| [VPN 1]| [VPN 2]|        | [VPN 0]| [VPN 1]| [VPN 0]| [VPN 1]| [VPN 1]|
		-------------------------------------------------------------------------

;------------------------------------------------------End:21.1------------------------------------------------------------------------------

;------------------------------------------------------Strt:21.2------------------------------------------------------------------------------
21.2The Present Bit

we should add some machinery higher up in the system in order to support swapping pages to and from the disk.

recall what happend in memory reference,
I)every ruuning process ->generating virtual memory reference(for instruction fetch or data accessing)
  the hardware is this case translate them into physical addresses before fetching the desired data from memory.
	common case->(....no more memory accessing)
II) hardware first extract VPN from VA, check TLB fro a match(TLB hit), and if it hit, produces the Physical address and fetch information.
	if (TLB miss) if VPN not found in the TLB, hardware walke to page table (by page-table base Register)
      looks up the page table entry (PTE) for this page using the VPN as an index.

III) if the page is valid and present in physical memory, hardware extract PFN  from PTE, install it in TLB retries the instructions,
	TLB hit that time.

IV) when hardware looks it PTE, it may find that the page is not present in physical memory.
	(allowing pages to be swapped to disk), 
comes up new piece of information called present Bit,
	A) if is set to one, page is present in physical memory and everything proceeds as above.
	B) if is set to 0, page is not in memory but in disk somewhere.
accessing page is not in physical memory is commenly refered to as page-fault.

Terminolog, page-not-present fault, but sometimes can refer to illegal memory accesses.
page miss(page faulting): accessing part of its virtual address  that the OS has swapped out to the disk.
(to  a page mapped into the virtual address space of a process, but simply not in physical  memory at time !!)
hardware raise exception OS take control.


Upon a page fault, the OS is invoked to service the page fault. A particular piece of code, known as a page-fault handler, runs, and must service the page fault, as we now describe.

;------------------------------------------------------End:21.2------------------------------------------------------------------------------

;------------------------------------------------------Strt:21.3------------------------------------------------------------------------------
21.3 The Page Fault
TLB misses, we have two types of systems: 
hardware managed TLBs(looks in Page table find PTE extract desire translation).
software managed TLBS(OS take control).


if page not present, OS puts in charge to handle the page fault
OS page-fault handler runs,
the hardware trusts the OS to manage this important duty.
OS needs to swap page into memory in oreder to service page fault.

#how OS know where to find the desired page?? in many systems page-table store such info.

OS could use bits in PTE normally used for data for a disk address.when OS reseives a page-fault it looks up PTE, issues the request
to disk to fetch the page into memory.
When the disk I/O completes, the OS will then update the page table to mark the page as present(bit), 
update the PFN field of the page-table entry (PTE) to record the in-memory location of the newly-fetched page, and retry the instruction.


This next attempt may generate a TLB miss, which would then be serviced and update the TLB with the translation (one
could alternately update the TLB upon when servicing the page fault, to avoid this step).

last restart would find translation fetch instruction from memory.

Note that while the I/O is in flight, the process will be in the blocked state.Thus, t
he OS will be free to run other ready processes while the page fault is being serviced. 
Because I/O is expensive, this overlap of the I/O (page fault) of one process and the execution of another is yet another way a ((multiprogrammed)) system can make the most effective use of its hardware.


A SIDE : WHY HARDWARE DOESN’T HANDLE PAGE FAULTS
	So why do they trust the OS to handle a page fault?
OS takes a long time to handle a fault, executing tons of instructions, operation on harddisk is so slow (extra overheads)
;------------------------------------------------------End:21.3------------------------------------------------------------------------------

;------------------------------------------------------Strt:21.4------------------------------------------------------------------------------
21.4 What If Memory Is Full?
we assumed that is a plenty of free memory in which to page in a page from swap sapce
what if memory may be full (or close to it)?.

OS might like first page out  one or more pages to make room for the new page the OS braught.
replacing and kicking out is known as the page-replacement policy.

focused on creating a good page replacement policy,kicking out the wrong page can exact a great cost on program performance.
Making the wrong decision can cause a program to run at disk-like speeds instead of memory-like speeds; 10,000 or 100,000 times slower.
;------------------------------------------------------End:21.4------------------------------------------------------------------------------
	;-------------------------code
		
;------------------------------------------------------Strt:21.5------------------------------------------------------------------------------
21.5 Page Fault Control Flow

Three important cases to understand When a TLB miss ocurs.
First, page was both present and valid, simply grab PFN from the PTE from page-table (by base-register), retry the instruction 
Second, page-fault handler must be run (valid but not present) valid to access but not present in physical memory.
Third, the access could be invalid page, likely terminating the offending process, Hardware traps invalid access, OS trap handler runs.


OS find PFN for the soon-to-be-fault-in page to reside with;
if there is no such page, we will have to replacement algorithm run and kick some pages out of memory, with PFN handler issuse I/O to read page from swap space. when that slow operation done, OS completes update Page-table and retries instruction.
resulting TLB miss and retring TLB hit at some point hardware will be able to access desired item.
;------------------------------------------------------End:21.5------------------------------------------------------------------------------

;------------------------------------------------------Strt:21.6------------------------------------------------------------------------------
21.6  When Replacements Really Occur

high watermark (HW ) and low watermark (LW ) to help decide when to start (replacesing)evicting pages from memory?  

when the OS notices that there are fewer than LW pages available, a background thread that is responsible for freeing memory runs.
The thread evicts pages until there are HW pages available. The back- ground thread, sometimes called the swap daemon or page daemon 1 ,
then goes to sleep, happy that is has freed some memory for running processes and the OS to use.



cluster or group a number of pages and write them out at once to the swap partition, thus increasing the efficiency of the disk.
clustering reduces seek and rotational overheads of a disk and thus increases performance noticeably.
;------------------------------------------------------End:21.6------------------------------------------------------------------------------
