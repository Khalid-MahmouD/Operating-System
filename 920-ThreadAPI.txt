/*
 


*/
how to creat and control threads
what interfaces should the OS present for the thread creation and control?
how they should be designed to enable ease of use as well as utility?

;------------------------------------------------------------------Strt:27.1-------------------------------------------------------------------
27.1 Thread Creation
first thing to write a multi-threaded  program is to create a new  threads,

#include<pthread.h>
//prototype 
int
pthread_creat(pthread_t* thread, const pthread_arr_t *attr, void* (*start_routine)(*void), void* args);

there are four arguments: thread, attr, start_routine, and args.

first, thread, is a pointer to structure of type pthread_t; use this structure to interact with this thread,
we pass to the pthread_creat() to initialize it.

second, arrgument attr, is used to spicify any attributes this thread might have.
may be, stack size, or info about scheduling priority of the thread.
An attribute is initialized with a separate call to pthread_attr_init();
in most cases, the defaults will be fine; in this case, we will simply pass the value NULL in.

third argument is the most complex, asking: which function should this thread start running in?
called 🔥️function pointer in C: function name with a single argument of type void, which returns a value of type void * (i.e., a void pointer).

integer argument, instead of a void pointer
void * (*start_routine)(int), and returning value of void*.

returning value is integer but argument still took a void pointer.
int (*start_routine)(void*), and returning value of void*.


why do we need these void pointers?
allows us to pass any  type of argument, as a return value allowing thread to return any type of result.

the thread, once created, can simply cast its argument to type it expects.
Once you creat a thread, you really have another live excuting entity, complete with its own call stack, running within the
same address space as all the currently existing threads in the program.

;------------------------------------------------------------------Strt:27.2-------------------------------------------------------------------
27.2 Thread Completion 
  what happens if you want to ((wait for a thread to complete))?
  in particular, you must call the routine pthread_join().
 
int pthread_join(pthread_t thread, void **value_ptr);

this routine takes only two arguments!!
1️⃣️the first is of type pthread_t, and is used to specify which thread to wait for.
   the same value passed into the creation; used for the thread to stop running.

2️⃣️the second is a pointer to the return value you expect to get back.
  the routine can return anything, it is defined to return a pointer to void;

because the pthread join() routine changes the value of the passed in argument, you need to pass in a pointer to the value,
not passing the value it self.
-------------------------------------------------
🔷️.......To return values, the myret_t type is used.  
class myarg_t{
 int a;
 int b;
};
class myret_t{
 int a;
 int b;
};
void *mythread(void *arg) {
  myarg_t *m = (myarg_t *) arg;
  printf("%d %d\n", m->a, m->b);
  myret_t *r = Malloc(sizeof(myret_t));
  r->x = 1;
  r->y = 2;
 return (void *) r;
}
int
main(int argc, char *argv[]) { 
 int rc;
 pthread_t p;
 
 myret_t *m;
 myarg_t args;
 
 args.a = 10;
 args.b = 20;
 
 Pthread_create(&p, NULL, mythread, &args);
 //we pass a pointer to hold the returned value.
 Pthread_join(p, (void **) &m);
 printf("returned %d %d\n", m->x, m->y);
 
 return 0;

---------------------------------------------------
🔷️we don't have to do all of painfull packing and unpacking of arguments.
creat thread with no argument just pass NULL, we can pass NULL into pthread_join() if we don't care about return value.
pass a single value (e.g int), we don't need to unpack or pack thins

void *mythread(void *arg) {
int m = (int) arg;
printf("%d\n", m);
return (void *) (arg + 1);
}

pthread_t p;
int rc, m;
Pthread_create(&p, NULL, mythread, (void *) 100);
Pthread_join(p, (void **) &m);
printf("returned %d\n", m);
-------------------------------------------------------
🔷️we don't have to be carful with how values are returned from thread.
never return a pointer refers to something allocated on the thread's call stack.
will return something deallocated after thread finished.
variable r is allocated on the stack of mythread.
when it returns, variable value automatically deallocated.
passing back a pointer to a now deallocated variable to a bad results.

in this example:
void *mythread(void *arg) {
 myarg_t *m = (myarg_t *) arg;
 printf("%d %d\n", m->a, m->b);
 myret_t r; // ALLOCATED ON STACK: BAD!
 r.x = 1;
 r.y = 2;
return (void *) &r;
}


to create thread we  use pthread_create() followed by Pthread_join().
there is an easier way to accomplish this exact task; it's called a ↗️(procedure call).

⏩️Clearly, we’ll usually be creating more than just one thread and waiting for it to complete, other-
wise there is not much purpose to using threads at all. 

👀️not all code that is multi-threaded uses the join routine.
for-example: multi-theaded web server might create a number of worker theads, using main thread to accept requests
and pass them to the workers, long-lived programs thus may not need to join.

However, a parallel program that creates threads to execute a particular task (in parallel) will likely use .._join() to make sure
all such work completes before exiting or moving onto the next stage of computation.


;------------------------------------------------------------------Strt:27.3-------------------------------------------------------------------
27.3 Locks 🔐️🔥️
byond threa creation and join, the most useful set of functions provided by POSIX library 🔥️are those
for providing mutual exclusion to a critical section via locks.

basic pair of routines to use for this purpose is provided by this pair:
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);


When you have a region of code you realize is a ⚠️<critical section>, need to be protected by locks in order to operate as desired.

pthread_mutex_t lock;
pthread_mutex_lock(&lock);
x = x + 1; // or whatever your critical section is
pthread_mutex_unlock(&lock);

intent of the code: 
🔎️if no other threads holds the lock when pthread_mutex_lock() is called, 
   the thread will acquire the lock and enter the critical section.

🔎️if another thread does indeed hold the lock, the thread trying to grab the lock will not returning
  from the call until acquring the lock( implies -> thread which holding the locks released it via the unlock call).

many thread stuck wating there inside lock acquisition 

this code is broken, in two important ways.
1️⃣️lack of proper initialization, all locks must be properly initialized in order to  guarantee that(حتي نضمن) 
   they have the correct values to begin with and thus work as desired when lock and unlock are called.

   there are two ways to initialize locks.
   ✅️ use PTHREAD_MUTEX_INITIALIZER, as follows:
        pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
      sets the lock to the default values and thus makes the lock usable.
   ✅️ The dynamic way to do it (i.e., at run time) is to make a call to pthread mutex init(), as follows:
 	int rc = pthread_mutex_init(&lock, NULL);
        assert(rc == 0); // always check success!
      first argument is the lock itself, second optional.
  we usually use the dynamic (latter) method.
  pthread_cond_destroy()
  should also be made, when you are done with the lock;

2️⃣️ fails to check errors code when calling lock and unlock.
  If your code doesn’t properly check error codes, the failure will happen silently, which
  in this case could allow multiple threads into a critical section.
  
  ✅️use wrappers,which assert that the routine succeeded
	//Use this to keep your code clean but check for failure
	//Only use if exiting program is OK upon failure
	void Pthread_mutex_lock(pthread_mutex_t *mutex) {
	int rc = pthread_mutex_lock(mutex);
	assert(rc == 0);
	}
    ☣️more sophisticated (non-toy) programs, which can’t simply exit when something goes wrong, 
      should check for failure and do something appropriate when the lock or unlock does not succeed.

The lock and unlock routines are not the only routines that pthreads has to interact with locks.
there are two more routines which may be interest:

int pthread_mutex_trylock(pthread_mutex_t *mutex);
int pthread_mutex_timedlock(pthread_mutex_t *mutex, struct timespec *abs_timeout);

1️⃣️first returns failure if the lock is already held; اول واحد هيفشل لو فيه فعلا ثرد ماسكة الحتة بتاعة الكود
2️⃣️second returns after timeout or after acquiring the lock; التاني هيرجع لو التايم اوت خلص اللي انا بدهولوه عشان ميستناش كتير او يرجع بعد ما ياخد اللوك ليه
  whichever happens first.

;------------------------------------------------------------------Strt:27.4-------------------------------------------------------------------
27.4 Condition Variables
major component of any threads library, is the presence of a condition variable.
useful when some kind of signaling must take place between threads, if one thread is waiting for another to do something before it can continu.

Two primary routines are:
int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);
int pthread_cond_signal(pthread_cond_t *cond);

To use a condition variable, one has to in addition have a lock that is associated with this condition.
When calling either of the above routines, this lock should be held.

pthread cond wait(), put calling thread sleep, wait for other thread to signal it, if any changing now-sleeping thread
might care about. 
بكل بساطة لو في ثيرد عاوزة تاخد جزء من الكود وفيه ثرد قبلها معاها قفل فالاول هتنام لحد ما التانية اللي معاها القفل تنبهها وتقولها انا خلصت امسك يا ابو الصحاب القفل انت.

//pthread cond init() (and corresponding the pthread_cond_destroy() call) instead tatic initializer PTHREAD_COND_INITIALIZER.
//initializing lock
pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t init = PTHREAD_COND_INITIALIZER;

Pthread_mutex_lock(&lock);
	while (initialized == 0) // it is not finished yet.
	 Pthread_cond_wait(&init, &lock);// but the calling thread to wait(sleep), untill initialized !=0, beside release the lock.
Pthread_mutex_unlock(&lock);

after initialization of the relevant lock and condition,
thread checks to see if the variable initialized has yet been set to something other than zero.
If not, the thread simply calls the wait routine in order to sleep until some other thread wakes it.

The code to wake a thread, which would run in some other thread,
looks like this:
 
 Pthread_mutex_lock(&lock);
 initialized = 1;
 Pthread_cond_signal(&init);
 Pthread_mutex_unlock(&lock);

a few things to note about this code:
1️⃣️lfirst, at signaling (modifying the global variable initialized), make sure lock held, This ensures that we don’t have a race condition into our code.

2️⃣️ seconde, wait call takes a lock as its second parameter, whereas signal call takes a condition only,
	the wait call, putting calling thread to sleep, release the lock when putting caller to sleep. 
	imagine if it did not: how could the other thread acquiring the lock and signal it to wake up ?
	befor returning after being woken, pthread cond wait() re-acquires the lock
	thus ensuring that any time the waiting thread is running between the lock acquire at the beginning
        of the wait sequence, and the lock release at the end, it holds the lock.
 One last oddity: the waiting thread re-checks the condition in a while loop, instead of a simple if statement.
	using a while loop is the simple and safe thing to do. Although it rechecks the condition (perhaps adding a little overhead), 

some implementation spuriously wake up waiting thread, without rechecking, the waiting thread will continue thinking that the condition has changed even though it has not. It is safer thus to view waking up as a hint that something might have changed, rather than an absolute fact.


it is tempting to use a simple flag to signal between two threads, instead of a condition variable and associated lock.

while (initialized == 0)
; // spin

The associated signaling code would look like this:
initialized = 1;

not recomended it performs poorly in many cases(spining for long time just wastes CPU cycles).
it is error prone

it is surprisingly easy to make mistakes when using flags (as above) to synchronize between
threads; roughly half the uses of these ad hoc synchronizationswere buggy!


;------------------------------------------------------------------Strt:27.4-------------------------------------------------------------------
27.5 Compiling and Running

prompt> gcc -o main main.c -Wall -pthread

			ASIDE: THREAD API GUIDELINES
	There are a number of small but important things to remember when
	you use the POSIX thread library (or really, any thread library) to build a
	multi-threaded program. They are:
• Keep it simple. Above all else, any code to lock or signal between threads should be as simple as possible. Tricky thread interactions lead to bugs.

• Minimize thread interactions. Try to keep the number of ways in which threads interact to a minimum. Each interaction should
be carefully thought out and constructed with tried and true approaches (many of which we will learn about in the coming chapters).

• Initialize locks and condition variables. Failure to do so will lead to code that sometimes works and sometimes fails in very strange ways.

• Check your return codes. Of course, in any C and UNIX programming you do, you should be checking each and every return code, and it’s true here as well. 
Failure to do so will lead to bizarre and hard to understand behavior, making you likely to (a) scream, (b) pull some of your hair out, or (c) both.

• Be careful with how you pass arguments to, and return values from, threads. 
In particular, any time you are passing a reference to a variable allocated on the stack, you are probably doing something wrong.

• Each thread has its own stack. As related to the point above, please remember that each thread has its own stack. 
Thus, if you have a locally-allocated variable inside of some function a thread is executing, it is essentially private to that thread; 
no other thread can (easily) access it. To share data between threads, the values must be in the heap or otherwise some locale that is globally accessible.

• Always use condition variables to signal between threads. While it is often tempting to use a simple flag, don’t do it.

• Use the manual pages. On Linux, in particular, the pthread man pages are highly informative and discuss much of the nuances presented
here, often in even more detail. Read them carefully!

