we discuss process creation in UNIX systems 
system calls: fork() and exec() routine,A third wait(),
can be used by a process wishing to wait for a process it has created to
complete.
5.1 The fork() System Call.
used to creat new process

the process that is created is an (almost) exact copy of the calling process.
That means that to the OS, it now looks like there are two copies of 
the program p1 running, and both are about to return from the fork() system call.

The newly-created process (called the child, in contrast to the
creating parent(e.g if() else(); )) doesn’t start running at main(), like you might expect.

“hello, world” had called fork() itself.

noticed: the child isn’t an exact copy. Specifically, although
it now has its own copy of the address space (i.e., its own private
memory), its own registers, its own PC, and so forth,

the value it returns
to the caller of fork() is different. Specifically, while the parent receives
the PID of the newly-created child, the child is simply returned a 0.


You might also have noticed: the output is not deterministic. When
the child process is created, there are now two active processes in the system
that we care about: the parent and the child. Assuming we are running
on a system with a single CPU (for simplicity), then either the child
or the parent might run at that point.

cpu shedualer, which process runs at a given moment in time.

//  Parent process and child process are running the same program, but it does not mean they are identical. 
//OS allocate different data and state for these two processes and also control the flow of these processes can be different. See next example
#include <stdio.h> 
#include <sys/types.h> 
#include <unistd.h> 
  
void forkexample() 
{ 
    int x = 1; 
  
    if (fork() == 0) 
        printf("Child has x = %d\n", ++x); 
    else
        printf("Parent has x = %d\n", --x); 
} 
int main() 
{ 
    forkexample(); 
    return 0; 
} 

