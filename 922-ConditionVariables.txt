we developed the notion of a lock and seen how one can be properly built 
with the right combination of hardware and OS support.

locks is not the only primitives that are needed to build concurrent programs.
in many cases where a thread wiches to check whether a condition is true before continuing its excution.

a parent thread might wish to check whether a child thread has completed before continuing( this is often called a join() );
how such a wait be implemented? 

void *child(void *arg) {
   printf("child\n");
   // XXX how to indicate we are done?
   return NULL;
}

int main(int argc, char *argv[]) {
  printf("parent: begin\n");
  pthread_t c;
  Pthread_create(&c, NULL, child, NULL); // create child
  // XXX how to wait for child?
  printf("parent: end\n");
  return 0;
}
;----------------------------------------------A Parent Waiting For Its Child
we would like to see the following output:
parant: begin
child
parant: end

we could try using a shared variable, it works but inefficient, parant just spin wasting CPU time.
we would like here instead put the parant to sleep until the condition we  are waiting for (child done executing) comes true.

volatile int done = 0;

void *child(void *arg) {
  printf("child\n");
  done = 1;
  return NULL;
}


int main(int argc, char *argv[]) {
    printf("parent: begin\n");
    pthread_t c;
    Pthread_create(&c, NULL, child, NULL); // create child
    while (done == 0)
      ; // spin
    printf("parent: end\n");
    return 0;
}
;-------------------------------Parent Waiting For Child: Spin-based Approach

#how to wait for a condition?
it useful for a thread to wait for some condition to become true before proceeding.
the simple approach, just spinning until the condition become true, inefficient and wastes CPU cycles, can be correct.
how should a thread wait for a condition?


30.1 Definition and Routines

to wait for a condition to become true, a thread can make use of what is know as a condition variable.
is an explicit queue threads can put themselves on when some state of excution(condition) is not desired(by waiting on the condition);

some other thread, when it changes state, then can wake one or more of those waiting threads, allow them to continue (by signaling on the condition).

idea of private ‚Äúprivate semaphores‚Äù later named a ‚Äúcondition variable‚Äù.

to declare such a condition variable, on simply writes something like this: pthread_cond_t c; declare c as condition variable,
(also initialization required).
condition variable has two operations associated with it: wait() and signal().
wait() call is executed when a thread wishes put itself to sleep;
signal() call is executed when a thead has changed something in the program and thus
	wants to wake a sleeping thread waiting on this condition.

the POSIX calls look like this:
pthread_cond_wait(pthread_cond_t *c, pthread_mutex_t *m);
pthread_cond_signal(pthread_cond_t *c);

One thing you might notice about the wait() call is that it also takes a mutex as a parameter;
it assumes that this mutex  is locked when wait() is called.
wait() responsibility of wait() is to:
1Ô∏è‚É£Ô∏èrelease the lock and put the calling thread to sleep (atomically);
2Ô∏è‚É£Ô∏èwhen the thread wakes up it must re-acquire the lock before returning to the caller.
#preventing race conditions from occurring when it trying to put itself to sleep.

int done = 0;
pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t c = PTHREAD_COND_INITIALIZER;

void thr_exit() {
    Pthread_mutex_lock(&m);
    done = 1; // change state!!
    Pthread_cond_signal(&c);
    Pthread_mutex_unlock(&m);
}
void *child(void *arg) {
    printf("child\n");
    thr_exit();
    return NULL;
}
void thr_join() {
    Pthread_mutex_lock(&m); // acquire lock
    while (done == 0)
       Pthread_cond_wait(&c, &m);
    Pthread_mutex_unlock(&m);
}
int main(int argc, char *argv[]) {
   printf("parent: begin\n");
   pthread_t p;
   Pthread_create(&p, NULL, child, NULL);
   thr_join();
   printf("parent: end\n");
   return 0;
}
;-----------------------------------Parent Waiting For Child: Use A Condition Variable

There are two cases to consider.
1Ô∏è‚É£Ô∏è the parent creates the child but continues running itself (one single processor) and thus call 
thr_join()  to wait for child thread to complete.
    In this case, it will acquire the lock, 
    check if the child is done (it is not), 
    and put itself to sleep by calling wait()  (hence releasing the lock).
    
    child will run,  print message and call 
thr_exit() to wake the parent thread;
    this code just grabs the lock, 
    sets the state variable done, 
    and signals the parent thus waking it.
Finally, 
the parent will run (returning from wait() with the lock held), 
unlock the lock, and print the final message ‚Äúparent: end‚Äù.

2Ô∏è‚É£Ô∏èIn the second case,
 the child runs immediately upon creation, 
 sets done to 1, calls signal to wake a sleeping thread (but there is none, so it just returns), and is done. 
 The parent then runs, calls thr join(), sees that done is 1,  and thus does not wait and returns.

uses a while loop instead of just an if statement when deciding whether to wait on the condition.

To make sure you understand the importance of each piece of the thr exit() and thr join() code, let‚Äôs try a few alternate implementations.

1st we need the state variable done. ?
whould this work?
void thr_exit() {
    Pthread_mutex_lock(&m);
    Pthread_cond_signal(&c);
    Pthread_mutex_unlock(&m);
}

void thr_join() {
    Pthread_mutex_lock(&m);
    Pthread_cond_wait(&c, &m);
    Pthread_mutex_unlock(&m);
}
1Ô∏è‚É£Ô∏è‚ö†Ô∏èimagine the case where the child run immedialty 2nd case,
and calls thr_exit() immediatly; in this case it will signal, but there is no thread sleep!!.

when the parant runs, and call thr_join it will stuck waiting and no thread will ever wake itüîêÔ∏è.

üî•Ô∏èyou should appreciate the importance of the state variable done; 
   it records the value the threads are interested in knowing. 
   the sleeping, waking, and locking all are built around it.

2Ô∏è‚É£Ô∏è ‚ö†Ô∏èwe imagine that one does not need to hold a lock in order to signal and wait.
  What problem could occur here? Think about it!
void thr_exit() {
    done = 1;
    Pthread_cond_signal(&c);
}

void thr_join() {
   if (done == 0)
   Pthread_cond_wait(&c);
}

race condition,
if the parent calls thr_join() and then checks the value of done, 
it will see that it is 0 and thus try to go to sleep.
before call wait to go to sleep, the parent is inturrpted, and the child runs.
and changing the state variable done to 1 and signals, but no thread is wating and thus no 
thread is woken.
back from interrupt the parent runs again, it  sleeps forever, so sad.


ALWAYS HOLD THE LOCK WHILE SIGNALING
a tip, but rather mandated by the semantics of wait, because wait always
(a) assumes the lock is held when you call it, (b) releases said lock when putting the caller to sleep, and (c) re-acquires the lock just before returning.


30.2 The Producer/Consumer (Bound Buffer) Problem
the next problem will be known as producer/ consumer problem or bounded buffer problem,
and it led to invinte the general semaphore(which can be used as either lock or condition variable).

Imagine one or more producer threads and one or more consumer threads. 
Producers produce data items andwish to place themin a buffer;
consumers grab data items out of the buffer consume them in some way.

multi-threaded web server, a producer puts HTTP requests into a work queue(bounded buffer); 
consumer thread take requests out of this queue and process them.

A bounded buffer is also used when you pipe the output of one program into another,
grep foo file.txt | wc -l. // shell UNIX commend.
this running two processes concurrently; grep writes lines from file.txt
with the string foo in them to what it thinks is stander output;

redirect the output what it called in UNIX pipe(pipe system call), 
The other end of this pipe is connected to the standard input of the process wc, 
which simply counts the number of lines in the input stream and prints out the result.
grep is the producer; wc is the consumer; between them is bounded buffer (in-kernel),

Because the bounded buffer is a shared resource, we must of course require synchronized access to it, fear of a race condition arise
the first thing we need is a shared buffer, into which producer puts data, and out of which consumer takes data.
single integer (you can use pointer to data structure into this slot instead), 
and the two inner routine to put a value into the shared buffer, and to get a value out of buffer.

int buffer;
int count = 0; // initially, empty

void put(int value) {
 assert(count == 0);
	 count = 1;
	 buffer = value;
	
}

int get() {
	 assert(count == 1);
	 count = 0;
	 return buffer;
	
}
the put() routine 
assumes buffer is empty chack it by assertion, 
put the value into the shared buffer, 
and making it full by setting count to 1.

the get() routine does the opposite, setting buffer emty count = 0,
returning value, it is a single entry later will be generized to queue.
the odds should be obvious:

1st: only put data into buffer when count = 0(empty_), and only get data from buffer when count = 1 (full_)

2nd: if we write the synchronization code such that producer put when buffer is full, consumer get when buffer is empty.
	we have done something wrong (and in this code, an assertion will fire).

void* producer(void* arg) {
	 int i;
	 int loops = (int)arg;
	 for (i = 0; i < loops; i++) {
		 put(i);
	 }

}
void* consumer(void* arg) {
	int i;
	while (1) {
		int tmp = get();
		printf("%d\n", tmp);

	}
}
;--------------------------------Producer/Consumer Threads (Version 1)

producer thread puts and integer into the shard buffer loops number of times,
consumer thread gets data out of that shared buffer (forever), printing out the data item it pulled from the shared buffer.

;------------------------------------------------------------------------------------------------------
A Broken Solution
we just have a single producer and a single consumer. obviously put() and get() have critical section within them,
put() updates the buffer, get() read from it.
however putting a lock around the code doesn't work; we need something more.(condition variable).
first try this  we have a single condition variable cond and associated lock mutex.

cond_t cond;
mutex_t mutex;

void* producer(void* arg) {
	int i;
	for (i = 0; i < loops; i++) {
		Pthread_mutex_lock(&mutex);				// p1
		if (count == 1)	//it is full?				// p2
			Pthread_cond_wait(&cond, &mutex);		// p3
		put(i);							// p4
		Pthread_cond_signal(&cond);				// p5
		Pthread_mutex_unlock(&mutex);				// p6
	}
}

void* consumer(void* arg) {
	int i;
	for (i = 0; i < loops; i++) {
		Pthread_mutex_lock(&mutex);				// c1
		if (count == 0)						// c2
			Pthread_cond_wait(&cond, &mutex);		// c3
		int tmp = get();					// c4
		Pthread_cond_signal(&cond);				// c5
		Pthread_mutex_unlock(&mutex);			 	// c6
		printf("%d\n", tmp);
	}
}
;-------------------------------------------------Producer/Consumer: Single CV and If Statement

Let‚Äôs examine the signaling logic between producers and consumers.
When a producer wants to fill the buffer, it waits for it to be empty (p1‚Äìp3).
The consumer has the exact same logic, but waits for a different condition: fullness (c1‚Äìc3).

this code works, with single consumer and single producer.
However, if we have more than one of these threads (e.g., two consumers), 
the solution has two critical problems. What are they?

Assume there are two consumers (Tc1 and Tc2) and one producer (Tp).
1st a consumer (Tc1) runs;  it acquires the lock (c1), 
    checks if any buffers are ready for consumption (c2), and finding that none are, 
    waits (c3) (which releases the lock).

2nd Tp runs. acquire the lock (p1), check if all buffers are full (p2), finding that is not is this case,
    go ahead and fill the buffer (p4), signaling that the buffer has been filled(p5),
    moving waiting thread tc1 from sleep to ready state.
    it continues until realizing the buffer is full, at whick point it sleeps(p6, p1-p3).

3rd problem here occurs: another consumer (Tc2) sneaks in and consumes the one existing value in the buffer
    (c1, c2, c4, c5, c6) c3 the buffer is full.
    Tc1 runs after acquire lock before returning from the wait.
    call get() (c4), but there is no data !! no buffer to consume

An assertion triggers, and the code has not functioned as desired. 
we should have somehow prevented Tc1 from trying to consume because Tc2 snuck in, 
and consumed the one value in the buffer that had been produced.

üî•Signaling a thread only wakes them up; it is thus a hint that the state of the world has changed 
 (in this case, that a value has been placed in the 0uffer), 
 but there is no guarantee that when the woken thread runs, the state will still be as desired.

Mesa semantics, after the first research that built a condition variable in such a manner [LR80]; the contrast, referred to as
Hoare semantics, is harder to build but provides a stronger guarantee that the woken thread will run immediately upon being woken [H74].
Virtually every system ever built employs Mesa semantics.

;------------------------------------------------------------------------------------
Better, But Still Broken: While, Not If;

Fortunately, this fix is easy (Figure 30.7): change the if to a while. 
Think about why this works; 

now consumer Tc1 wakes up and (with the lock held) immediately re-checks the state of the shared variable (c2). 
If the buffer is empty at that point,
the consumer simply goes back to sleep (c3). 

The corollary if is also changed to a while in the producer (p2).
Thanks to Mesa semantics, a simple rule to remember with condition variables is to always use while loops. 
Some times you don‚Äôt have to recheck the condition, but it is always safe to do so; just do it and be happy.

cond_t cond;
mutex_t mutex;

void* producer(void* arg) {
	int i;
	for (i = 0; i < loops; i++) {
		Pthread_mutex_lock(&mutex);				// p1
		While(count == 1)	//it is full?			// p2
			Pthread_cond_wait(&cond, &mutex);		// p3
		put(i);							// p4
		Pthread_cond_signal(&cond);				// p5
		Pthread_mutex_unlock(&mutex);				// p6
	}
}

void* consumer(void* arg) {
	int i;
	for (i = 0; i < loops; i++) {
		Pthread_mutex_lock(&mutex);				// c1
		while(count == 0)					// c2
			Pthread_cond_wait(&cond, &mutex);		// c3
		int tmp = get();					// c4
		Pthread_cond_signal(&cond);				// c5
		Pthread_mutex_unlock(&mutex);			 	// c6
		printf("%d\n", tmp);
	}
}

However, this code still has a bug, the second of two problems mentioned above.
1st single condition variable
2nd The problem occurs when two consumers run first (Tc1 and Tc2), and both go to sleep (c3). 
    Then, a producer runs(Tp), put a value in the buffer, wakes one of the consumers (say Tc1), and goes back to sleep. 
    Now we have one consumer ready to run (Tc1), and two threads sleeping on a condition (Tc2 and Tp).
    And we are about to cause a problem to occur: things are getting exciting!

The consumer Tc1 then wakes by returning from wait() (c3), re-checks the condition (c2), 
and finding the buffer full (count = 1), consumes the value (c4). 
This consumer then, critically, signals on the condition (c5),  waking one thread that is sleeping. 

However, which thread should it wake? Because the consumer has emptied the buffer, it clearly should wake the producer. 
However, if it wakes the consumer Tc2 (which is definitely possible, depending on how the wait queue ismanaged), we have a problem.

Specifically, the consumer Tc2 will wake up and find the buffer empty (c2), and go back to sleep (c3). 
The producer Tp, which has a value to put into the buffer, is left sleeping. 
The other consumer thread, Tc1, also goes back to sleep. All three threads are left sleeping, a clear bug;

#Using while loops around conditional checks also handles the case where spurious wakeups occur.
#Signaling is clearly needed, but must be more directed. A consumer should not wake other consumers, only producers, and vice-versa.

;-----------------------------------------------------------------------------------------------
The Single Buffer Producer/Consumer Solution
small solution: use two condition variables, inorder to properly signal which type of thread should wake up when state of system changes.
filled ? wake up consumer, emty ? wake up producer :D.
By doing so, the second problemabove is avoided by design: a consumer can never accidentally wake a consumer, 
and a producer can never accidentally wake a producer.

cond_t empty, fill;
mutex_t mutex;

void* producer(void* arg) {
	int i;
	for (i = 0; i < loops; i++) {
		Pthread_mutex_lock(&mutex);				// p1
		While(count == 1)	//it is full?			// p2
			Pthread_cond_wait(&cond, &mutex);		// p3
		put(i);							// p4
		Pthread_cond_signal(&fill);				// p5
		Pthread_mutex_unlock(&mutex);				// p6
	}
}

void* consumer(void* arg) {
	int i;
	for (i = 0; i < loops; i++) {
		Pthread_mutex_lock(&mutex);				// c1
		while(count == 0)					// c2
			Pthread_cond_wait(&cond, &mutex);		// c3
		int tmp = get();					// c4
		Pthread_cond_signal(&empty);				// c5
		Pthread_mutex_unlock(&mutex);			 	// c6
		printf("%d\n", tmp);
	}
}

;-------------------------------------------------------------------------------------------
The Final Producer/Consumer Solution

The last change we make is to enable more concurrency and efficiency;
we add more buffer slots.
so that multiple values can be produced before sleeping, 
and similarly multiple values can be consumed before sleeping.
with a single producer and consumer, it reduces context switches;

multiple producers or consumers or both, it even allows concurrent producing or consuming to take place, thus increasing concurrency.
small change from our current solution.

int buffer[MAX];
int fill = 0;
int use = 0;
int count = 0;

void put(int value) {
	buffer[fill] = value;
	fill = (fill + 1) % MAX;
	count++;
}
int get() {
	int tmp = buffer[use];
	use = (use + 1) % MAX;
	count--;
	return tmp;
}
;---------------------------------------------------The Final Put and Get Routines
cond_t empty, fill;
mutex_t mutex;

void* producer(void* arg) {
	int i;
	for (i = 0; i < loops; i++) {
		Pthread_mutex_lock(&mutex);				// p1
		While(count == MAX)	//it is full?			// p2
			Pthread_cond_wait(&cond, &mutex);		// p3
		put(i);							// p4
		Pthread_cond_signal(&fill);				// p5
		Pthread_mutex_unlock(&mutex);				// p6
	}
}

void* consumer(void* arg) {
	int i;
	for (i = 0; i < loops; i++) {
		Pthread_mutex_lock(&mutex);				// c1
		while(count == 0)					// c2
			Pthread_cond_wait(&cond, &mutex);		// c3
		int tmp = get();					// c4
		Pthread_cond_signal(&empty);				// c5
		Pthread_mutex_unlock(&mutex);			 	// c6
		printf("%d\n", tmp);
	}
}
;---------------------------------------------------The FinalWorking Solution

The first change for this final solution is within the buffer structure itself and the corresponding put() and get().
We also slightly change the conditions that producers and consumers check in order to determine whether to sleep or not.

A producer only sleeps if all buffers are currently filled (p2); similarly, 
A consumer only sleeps if all buffers are currently empty (c2). 
And thus we solve the producer/consumer problem.


30.3 Covering Conditions

// how many bytes of the heap are free?
int bytesLeft = MAX_HEAP_SIZE;

// need lock and condition too
cond_t c;
mutex_t m;
void*
 allocate(int size) {
	Pthread_mutex_lock(&m);
	while (bytesLeft < size)
		 Pthread_cond_wait(&c, &m);
	void* ptr = ...; // get mem from heap
	bytesLeft -= size;
	Pthread_mutex_unlock(&m);
	return ptr;
}

void free(void* ptr, int size) {
	 Pthread_mutex_lock(&m);
	 bytesLeft += size;
	 Pthread_cond_signal(&c); // whom to signal??
	 Pthread_mutex_unlock(&m);
	
}

when thread calls into memory allocation code, wait for more memory to be free.
Conversely, when a thread frees memory, it signals that more memory is free. 
However, our code above has a problem: which waiting thread (there can be more than one) should be woken up?



Consider the following scenario.
Assume there are zero bytes free;
thread Ta calls allocate(100),
thread Tb which asks for less memory by calling allocate(10).
Both Ta and Tb go to sleep there aren't enogh free bytes to satisfy either of these requests.

Tc, calls free(50)
when it calls signal to wake a waiting thread, it might not wake the correct waiting thread, Tb, 
which is waiting for only 10 bytes to be freed;

Thus,
the code in the figure does not work, as the thread waking other threads
does not know which thread (or threads) to wake up.

one solution 
replace the pthread_cond_signal() call by pthread_cond_broadcast(), wake all waiting threads.
we guarantee that any threads that should be woken are.
needlessly, bad performance.

Those threads will simply wake up, re-check the condition, and then go immediately back to sleep.

Lampson and Redell call such a condition a covering condition, as it covers all the cases where a thread needs to wake up (conservatively);
The astute reader might also have noticed we could have used this approach earlier 
(see the producer/consumer problem with only a single condition variable).
broadcast may be the most straightforward solution available.